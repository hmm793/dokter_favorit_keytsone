# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  description: String
  phoneNumber: String
  role: String
  photoProfile: ImageFieldOutput
  department: Department
  password: PasswordState
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  description: StringFilter
  phoneNumber: StringFilter
  role: StringNullableFilter
  department: DepartmentWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  description: OrderDirection
  phoneNumber: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  description: String
  phoneNumber: String
  role: String
  photoProfile: ImageFieldInput
  department: DepartmentRelateToOneForUpdateInput
  password: String
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input DepartmentRelateToOneForUpdateInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  description: String
  phoneNumber: String
  role: String
  photoProfile: ImageFieldInput
  department: DepartmentRelateToOneForCreateInput
  password: String
}

input DepartmentRelateToOneForCreateInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
}

type Department {
  id: ID!
  name: String
  user(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  userCount(where: UserWhereInput! = {}): Int
}

input DepartmentWhereUniqueInput {
  id: ID
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  id: IDFilter
  name: StringFilter
  user: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input DepartmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input DepartmentUpdateInput {
  name: String
  user: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input DepartmentUpdateArgs {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateInput!
}

input DepartmentCreateInput {
  name: String
  user: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Appointment {
  id: ID!
  department(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  departmentCount(where: DepartmentWhereInput! = {}): Int
  doctor: User
  pasien: User
  catatanKeluhan: String
  start: DateTime
  end: DateTime
  grandTotal: Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AppointmentWhereUniqueInput {
  id: ID
}

input AppointmentWhereInput {
  AND: [AppointmentWhereInput!]
  OR: [AppointmentWhereInput!]
  NOT: [AppointmentWhereInput!]
  id: IDFilter
  department: DepartmentManyRelationFilter
  doctor: UserWhereInput
  pasien: UserWhereInput
  catatanKeluhan: StringFilter
  start: DateTimeNullableFilter
  end: DateTimeNullableFilter
  grandTotal: IntNullableFilter
}

input DepartmentManyRelationFilter {
  every: DepartmentWhereInput
  some: DepartmentWhereInput
  none: DepartmentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AppointmentOrderByInput {
  id: OrderDirection
  catatanKeluhan: OrderDirection
  start: OrderDirection
  end: OrderDirection
  grandTotal: OrderDirection
}

input AppointmentUpdateInput {
  department: DepartmentRelateToManyForUpdateInput
  doctor: UserRelateToOneForUpdateInput
  pasien: UserRelateToOneForUpdateInput
  catatanKeluhan: String
  start: DateTime
  end: DateTime
  grandTotal: Int
}

input DepartmentRelateToManyForUpdateInput {
  disconnect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AppointmentUpdateArgs {
  where: AppointmentWhereUniqueInput!
  data: AppointmentUpdateInput!
}

input AppointmentCreateInput {
  department: DepartmentRelateToManyForCreateInput
  doctor: UserRelateToOneForCreateInput
  pasien: UserRelateToOneForCreateInput
  catatanKeluhan: String
  start: DateTime
  end: DateTime
  grandTotal: Int
}

input DepartmentRelateToManyForCreateInput {
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Schedule {
  id: ID!
  start: DateTime
  end: DateTime
}

input ScheduleWhereUniqueInput {
  id: ID
}

input ScheduleWhereInput {
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
  id: IDFilter
  start: DateTimeFilter
  end: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ScheduleOrderByInput {
  id: OrderDirection
  start: OrderDirection
  end: OrderDirection
}

input ScheduleUpdateInput {
  start: DateTime
  end: DateTime
}

input ScheduleUpdateArgs {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateInput!
}

input ScheduleCreateInput {
  start: DateTime
  end: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createDepartment(data: DepartmentCreateInput!): Department
  createDepartments(data: [DepartmentCreateInput!]!): [Department]
  updateDepartment(
    where: DepartmentWhereUniqueInput!
    data: DepartmentUpdateInput!
  ): Department
  updateDepartments(data: [DepartmentUpdateArgs!]!): [Department]
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteDepartments(where: [DepartmentWhereUniqueInput!]!): [Department]
  createAppointment(data: AppointmentCreateInput!): Appointment
  createAppointments(data: [AppointmentCreateInput!]!): [Appointment]
  updateAppointment(
    where: AppointmentWhereUniqueInput!
    data: AppointmentUpdateInput!
  ): Appointment
  updateAppointments(data: [AppointmentUpdateArgs!]!): [Appointment]
  deleteAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteAppointments(where: [AppointmentWhereUniqueInput!]!): [Appointment]
  createSchedule(data: ScheduleCreateInput!): Schedule
  createSchedules(data: [ScheduleCreateInput!]!): [Schedule]
  updateSchedule(
    where: ScheduleWhereUniqueInput!
    data: ScheduleUpdateInput!
  ): Schedule
  updateSchedules(data: [ScheduleUpdateArgs!]!): [Schedule]
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteSchedules(where: [ScheduleWhereUniqueInput!]!): [Schedule]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  departments(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  department(where: DepartmentWhereUniqueInput!): Department
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  appointments(
    where: AppointmentWhereInput! = {}
    orderBy: [AppointmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Appointment!]
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  appointmentsCount(where: AppointmentWhereInput! = {}): Int
  schedules(
    where: ScheduleWhereInput! = {}
    orderBy: [ScheduleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Schedule!]
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedulesCount(where: ScheduleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
